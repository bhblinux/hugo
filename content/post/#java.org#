** 基本数据类型
*** 整数类型
    1. byte
       1个字节
    2. short
       2个字节
    3. int
       4个字节
    4. long
       8个字节
*** s
** 链表
** final
 final 修饰类 为最终类不能被继承
修饰方法的时候则该方法不能被重写
修饰变量为常量,不能被修改 =需要大写=
** 集合框架(Collection接口)
*** List
    - 有序
**** ArrayList
**** LinkedList
*** Set
    - 无序,不能重复
    - 底层是Map
    
**** HashSet
     - 单项链表
     - 无序

**** LinkedHashSet
     - 有序,按存放顺序
     - 双向链表
     
**** ArrayHashSet

** Map
    
*** HashMap
    - 线程不安全,  速度快
    - 可以存储null key val is null

*** Hashtable
    - 线程安全

*** LinkedHashMap

** 静态导入
   - import static java.lang.System.out;
     #+BEGIN_SRC 
     使用
     out.print("hello");
     #+END_SRC

** 可变参数
   #+BEGIN_SRC 
   public void fun(int...a ){}
   #+END_SRC

** 异常
   - 方法内部跑出对象throw关键字
     #+BEGIN_SRC 
     throw new Exception("msg");
     #+END_SRC
   - 方法声明throws
     #+BEGIN_SRC 
     public void fun_name  () throws Exception {}
     #+END_SRC

*** 异常处理
    - try..catch
      #+BEGIN_SRC 
      try...catch...finally
      #+END_SRC
    - 运行时期异常
      #+BEGIN_SRC 
      throw new RuntimeException();
      方法的声明上,不需要throws语句
      #+END_SRC

*** 自定义异常
    - 继承Exception,或者继承RuntimeException
    - 构造方法中,super将异常信息,转递给父类

** IO

*** File
    - list
    - listFiles
    - FilenameFilter(过滤器)

*** 转换流

**** OutputStreamWriter
     字符流向字节

****  InputStreamReader
     字节流向字符

****  PringStream
     打印流

**** commons-io
     1. FilenameUtils
	- getExtension(String filename)

** 多线程

*** 线程池
    使用工厂类Executors中的静态方法创建线程对象,置顶线程的个数,ExecutorService 
    newFixedThreadPool(int num)返回线程池对象返回的是ExecutorService接口的实现类
    接口实现类对象,调用方法submit(ruunable r)提交线程执行任务
