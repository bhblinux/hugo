* c#
  - 工具 csc

** 编译运行 
   1. 编译
      #+BEGIN_SRC 
      csc 1.cs
      #+END_SRC
   2. 运行
      #+BEGIN_SRC 
      class HelloWorld
      {
	static void Main(){
	System.Console.WriteLine("hello c#");
	}
	}
      #+END_SRC
** 基础
*** 变量
    # 变量未初始化不能使用.
**** string
     - @
       #+BEGIN_SRC 
       取消转义
       #+END_SRC
*** 三元表达式
    表达式1?表达式2:表达式3
    表达式1为true,表达式的结果为表达式2的值
    表达式1一般为关系表达式
*** 随机数
    Random
    #+BEGIN_SRC 
    Random r=new Random();
    a = r.Next(1,10);
    #+END_SRC
*** 枚举
    1. 声明
       #+BEGIN_SRC 
       enum Day{
       one,two,the,four,five
       };
       Day d=Day.one;
       #+END_SRC
*** 函数
    - 引用传递
      1. 定义
	 public void add(ref int a);
      2. 调用
	 add(ref a);
    - 值传递
      1. 定义
	 public void add(int a,int b);
      2. 调用
	 add(a,b);
    - 可变参数
      1. 定义
	 public void printArr(params int[] arr);
      2. 调用
	 printArr(arr);

    - 按输出传递参数
      1. 定义
	 public void getVal(out int a);

      2. 调用
	 getVal(out a);

    - 重载
      函数名一样,参数个数或者参数类型不同即为重载,返回值不同,不构成重载



** 关键字
   - ref
     共用,引用

   - region
     #region&#endregion 在编辑器的大纲功能时展开或折叠代码块
    
   - string 
     1. ToUpper 将字符串转成大写

     2. ToLower 转小写

     3. Split 字符串分割

     4. Replace 替换

     5. Contains 判断是否包含

     6. StartsWith 以..开始

     7. EndsWith 以..结束

     8. SubString 截止字符串

     9. Indexof 获取字符的索引

     10. LastIndexof 获取字符串中最后一次出现的位置
   - partial
     #+BEGIN_SRC 
     public partial class Person{}//申明该类是person的一部分
     #+END_SRC
** 面向对象

*** 封装
    1. 属性封装
       #+BEGIN_SRC 
       private string _name;
       public string Name{
       set {_name=value;}
       get {return _name;}
       }
       public Person() { }
        public Person(string name, int age)
        {
            this.Name = name;
            this.Age = age;
        }
       #+END_SRC
    2. 里式转换
       #+BEGIN_SRC 
       public string Name{set;get;}
       #+END_SRC
    3. 对象初始化器
       #+BEGIN_SRC 
       Person p=new Person(){Name='',Age=18};
       #+END_SRC

*** 继承
    1. 继承类
       #+BEGIN_SRC 
       class Student:Person
    {
        int _id;
        public int Id
        {
            set { _id = value; }
            get { return _id; }
        }
        public Student() { }
	//调用父类的构造函数
        public Student(string name,int age,int id):base( name, age) {
            _id = id;
        }
    }
       #+END_SRC
*** 多态
**** 虚函数
     1. new
	#+BEGIN_SRC 
	public new viod add(){}
	#+END_SRC
     2. 将父类的方法标记为virtual,将子类的方法标记为override
**** 抽象类
     1. 定义
	#+BEGIN_SRC 
	public abstract Animal{
	public abstract void Eeat();
	}
	#+END_SRC
**** 接口
     #+BEGIN_SRC 
     namespace 接口
{
    interface IMyIterface
    {
        void sayHello();
    }

    class Person : IMyIterface
    {
        public void sayHello()
        {
            Console.WriteLine("hello person");
        }
    }
    class Student : IMyIterface
    {
        public void sayHello()
        {
            Console.WriteLine("我是学生");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            IMyIterface im = new Student();
            im.sayHello();
            Console.Read();
        }
    }
}
     #+END_SRC
     1. 显示实现接口
	接口名.方法
** 集合 
*** ArrayList
*** Hashtable
** 序列化
   1. 类的上面写[Serializable]
      #+BEGIN_SRC 
      BinaryFormatter bf=new Binaryformatter();
      bf.Serialize(流对象,要序列化的对象);
      namespace 序列化
{
    [Serializable]
    class Person
    {
        public string Name { set; get; }
        public int Age { set; get; }
        public void sayHello()
        {
            Console.WriteLine("name:{0};age{1}", this.Name, this.Age);
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Person p = new Person();
            p.Name = "zhangsan";
            p.Age = 27;
            using (FileStream fs = new FileStream(@"C:\Users\PC\Desktop\1.txt", FileMode.Open, FileAccess.Write))
            {
                BinaryFormatter bf = new BinaryFormatter();
                bf.Serialize(fs, p);
            }
            Console.Read();
        }
    }
}

      #+END_SRC

   2. 反序列化
      #+BEGIN_SRC 
      class Program
    {
        static void Main(string[] args)
        {
            Person p;
            using (FileStream fs = new FileStream(@"C:\Users\PC\Desktop\1.txt", FileMode.Open, FileAccess.Read))
            {
                BinaryFormatter bf = new BinaryFormatter();
                p=(Person)bf.Deserialize(fs);
                Console.WriteLine(p.Name);
            }
            Console.Read();
        }
    }
      #+END_SRC
** 其他类
*** File
    1. Exist
    2. Copy
    3. Move
    4. Delete
    5. ReadAllBytes读取文件
       #+BEGIN_SRC 
       var filename=@"C:\Users\liang\Desktop\1.txt";
       byte[] bytes=File.ReadAllBytes(filename);
       var str=System.Text.Encoding.Default.GetString(bytes);//将字节数组转成字符串
       #+END_SRC
    6. ReadAllLines
       #+BEGIN_SRC 
       #region readalllines
       string[] str1=File.ReadAllLines(filename, Encoding.Default);
       for (int i = 0; i<str1.Length; i++)
       {
           Console.WriteLine(str1[i]);
       }
            #endregion
       #+END_SRC
    7. ReadAllText
       #+BEGIN_SRC 
       var str2=File.ReadAllText(filename, Encoding.Default);
       Console.WriteLine(str2);
       #+END_SRC
    8. WriteAllBytes 写文件
       #+BEGIN_SRC 
       String content = "你好,中国";
       var filename = @"C:\Users\liang\Desktop\1.txt";
       //将字符串转成字节数字
       byte[] bytes = System.Text.Encoding.Default.GetBytes(content);
       File.WriteAllBytes(filename,bytes);
       #+END_SRC
    9. WriteAllLines
       #+BEGIN_SRC 
       String content = "你好,中国haha";
       var filename = @"C:\Users\liang\Desktop\1.txt";
       string[] str = { "你好","哈哈","c#"};
       File.WriteAllLines(filename, str);
       #+END_SRC
    10. WriteAllText
	#+BEGIN_SRC 
	String content = "你好,中国haha";
        var filename = @"C:\Users\liang\Desktop\1.txt";
        string[] str = { "你好","哈哈","c#"};
        File.WriteAllText(filename, content);
	#+END_SRC
    11. AppendAllText 追加写入

*** Path
    1. getExtension 获取文件扩展名
    2. ChangeExtentsion 改变扩展名
*** Directory目录
    1. CreateDirectory
    2. Delete
    3. Exists
    4. GetDirectories
    5. GetFiles
*** FileStream

**** StreamReader
     #+BEGIN_SRC 
     FileStream fs = new FileStream(@"C:\Users\liang\Desktop\1.txt",FileMode.Open,FileAccess.Read);
     //文件的长度
     Console.WriteLine(fs.Length);
     byte[] buff = new byte[fs.Length];
     int reg=fs.Read(buff,0,buff.Length);
     var str=System.Text.Encoding.UTF8.GetString(buff);
     Console.WriteLine(str);
     fs.Close();//关闭文件
     fs.Dispose();//释放资源
     Console.Read();
     #+END_SRC
     1. EndOfStream 流的结束符
**** StreamWriter
**** using
     using(创建流对象)
     #+BEGIN_SRC
     可以不用释放资源文件
     using (FileStream fs = new FileStream(@"C:\Users\liang\Desktop\1.txt", FileMode.Open, FileAccess.Read))
            {
            //文件的长度
            Console.WriteLine(fs.Length);
            byte[] buff = new byte[fs.Length];
            int reg=fs.Read(buff,0,buff.Length);
            var str=System.Text.Encoding.UTF8.GetString(buff);
            Console.WriteLine(str);
            Console.Read();
            }
     #+END_SRC
*** MD5
    #+BEGIN_SRC 
    
        public static string getMd5(string str)
        {
            MD5 md5 = MD5.Create();
            Byte[] bytes=System.Text.Encoding.Default.GetBytes(str);
            byte[] md5byte=md5.ComputeHash(bytes,0,bytes.Length);
            Console.WriteLine(md5byte.Length);

            foreach (var item in md5byte)
            {
                Console.Write(item.ToString("x2"));
		//x 是十六进制 2: 每个占用2位,不足补0
            }
            return "";
        }
    #+END_SRC
** Winform
** MDI窗口
   #+BEGIN_SRC 
   namespace MDI
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
            this.IsMdiContainer=true; 
            Form form2 = new Form();         
            Form form3 = new Form();           
            Form form4 = new Form();
            form2.MdiParent = this;
            form3.MdiParent = this;
            form4.MdiParent = this;
            form2.Show();
            form3.Show();
            form4.Show();
        }

        private void ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        private void ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }
    }
}

   #+END_SRC
** vs调试
   - F10 进入调试
   - F11 运行下一行
   - alt+shfit+f10 自动导入命名空间
