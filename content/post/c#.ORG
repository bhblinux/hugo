* c#
  - 工具 csc

** 编译运行 
   1. 编译
      #+BEGIN_SRC 
      csc 1.cs
      #+END_SRC
   2. 运行
      #+BEGIN_SRC 
      class HelloWorld
      {
	static void Main(){
	System.Console.WriteLine("hello c#");
	}
	}
      #+END_SRC
** 基础
*** 变量
    # 变量未初始化不能使用.
**** string
     - @
       #+BEGIN_SRC 
       取消转义
       #+END_SRC
*** 三元表达式
    表达式1?表达式2:表达式3
    表达式1为true,表达式的结果为表达式2的值
    表达式1一般为关系表达式
*** 随机数
    Random
    #+BEGIN_SRC 
    Random r=new Random();
    a = r.Next(1,10);
    #+END_SRC
*** 枚举
    1. 声明
       #+BEGIN_SRC 
       enum Day{
       one,two,the,four,five
       };
       Day d=Day.one;
       #+END_SRC
*** 函数
    - 引用传递
      1. 定义
	 public void add(ref int a);
      2. 调用
	 add(ref a);
    - 值传递
      1. 定义
	 public void add(int a,int b);
      2. 调用
	 add(a,b);
    - 可变参数
      1. 定义
	 public void printArr(params int[] arr);
      2. 调用
	 printArr(arr);

    - 按输出传递参数
      1. 定义
	 public void getVal(out int a);

      2. 调用
	 getVal(out a);

    - 重载
      函数名一样,参数个数或者参数类型不同即为重载,返回值不同,不构成重载



** 关键字
   - ref
     共用,引用

   - region
     #region&#endregion 在编辑器的大纲功能时展开或折叠代码块
    
   - string 
     1. ToUpper 将字符串转成大写

     2. ToLower 转小写

     3. Split 字符串分割

     4. Replace 替换

     5. Contains 判断是否包含

     6. StartsWith 以..开始

     7. EndsWith 以..结束

     8. SubString 截止字符串

     9. Indexof 获取字符的索引

     10. LastIndexof 获取字符串中最后一次出现的位置


** 面向对象

*** 封装
    1. 属性封装
       #+BEGIN_SRC 
       private string _name;
       public string Name{
       set {_name=value;}
       get {return _name;}
       }
       public Person() { }
        public Person(string name, int age)
        {
            this.Name = name;
            this.Age = age;
        }
       #+END_SRC
    2. 里式转换
       #+BEGIN_SRC 
       public string Name{set;get;}
       #+END_SRC
    3. 对象初始化器
       #+BEGIN_SRC 
       Person p=new Person(){Name='',Age=18};
       #+END_SRC

*** 继承
    1. 继承类
       #+BEGIN_SRC 
       class Student:Person
    {
        int _id;
        public int Id
        {
            set { _id = value; }
            get { return _id; }
        }
        public Student() { }
	//调用父类的构造函数
        public Student(string name,int age,int id):base( name, age) {
            _id = id;
        }
    }
       #+END_SRC
*** 多态

** vs调试
   - F10 进入调试
   - F11 运行下一行
