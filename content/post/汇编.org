
* 汇编
** 进制
   - 十进制:D,二进制:B,八进制:O,十六进制:H
*** 进制转换
** 8086/8088寻址和指令系统
*** 寄存器
    - 通用寄存器
      传送和暂存数据,可以保存运算结果
      - 数据寄存器
	1. AX AH AL
	2. BX BH BL
	3. CX CH CL
	4. DX DH DL
      - 指针寄存器
	1. SP 堆栈指针
	2. BP 基址指针
      - 变址寄存器
	1. SI 源地址
	2. DI 目的地址
    - 控制寄存器
      1. IP 指令指针
      2. FLAG 标志寄存器
    - 段寄存器
      1. CS 代码段
      2. DS 数据段
      3. SS 堆栈段
      4. ES 附加段
** 工具
   - DOSBOX
     默认安装
     #+BEGIN_SRC 
     C:\Users\PC\AppData\Local\DOSBox\dosbox-0.74.conf
     末尾添加
     mount c: D:\workspace\MASM32 
     c:
     
     #+END_SRC
   - 使用
     - u

     - d

     - a
       输入指令
       #+BEGIN_SRC 
       a 回车
       mov ax,4E20
       #+END_SRC
     - t 执行
     - r
       给寄存器赋值
       #+BEGIN_SRC 
       r ss 回车
       10 回车 (输入地址)

       #+END_SRC
     - e
       修改内存内容
       #+BEGIN_SRC 
       e 2000:0
       #+END_SRC
   - 约定
     1个字节=字节byte
     2个字节=字word
=======
** 地址寄存器
   段地址:偏移地址
   ds    si
   es    di
   ss    bp
   cs    ip
         sp
	 bx
   #+BEGIN_SRC 
   物理地址=基础地址+偏移地址
   基础地址=段地址*16(10H)
   CPU将cs:ip 所组合出来的地址里面的内容全部当做指令
   指令执行的过程(指令有长度)
   
   1. cpu从cs:ip所组成的地址中读取指令,将指令放入指令缓存器中
   2. IP=IP+所读指令的字节数
   3. 执行指令缓存器中的内容,
   #+END_SRC
   
*** 转移指令
    - jmp
      
      能够修改ip或者cs或者同时修改的指令(jmp)
    - call
      #+BEGIN_SRC
        =====
    call cpy_Boot 
    mov ax,1000H
    =====
    cpy_Boot:
    mov bx,1000H
    ...
    ret
    #+END_SRC
      将ip指向的指令保存起来,再做跳转
      ret,将call保存的指令取出执行

    
    
*** add 
    加法器
*** sub
    加法器
*** loop(循环)
    cx寄存器中存放 循环次数 cx=cx-1 检测cx是否为0
    #+BEGIN_SRC 
    计算123*236的和
    mov ax,0
    mov cx,236
addNumber    add  ax,123
    loop addNumber ;标号-地址
    #+END_SRC
*** 内存安全
    0:200H ~ 0:2FFH
    0:7E00H ~
*** ds和es
    ds:数据哪里来
    es:数据放哪里去
*** ax
    mov ax,ds:[bx]
    mov ax,bx
    mov ax,cs ;cs存放指令
*** and or
    and 指令 按位与运算
    or 指令 按位或运算
*** si|di
    ds[si]
    es[di]
*** dup(0)
    重复n 个0
    dup('1')
*** jcxz
    判断指令
*** loop
    #+BEGIN_SRC 
    cx=cx-1
    cx不等于0,就跳转到标号
    #+END_SRC
*** ret
    pop ip 
*** retf
** 栈
   一段连续的内存空间,连续的内存地址
   段地址:偏移地址
   ss:sp
   - 入栈(push)
   - 出栈(pop)
**  debug
   - debug参数
     #+BEGIN_SRC 
     r ds 回车0 回车 给ds寄存器赋值
     #+END_SRC
   - r
     显示所有寄存器
     r ax 修改寄存器中的内容
   - d
     显示内存地址
     d 1000:0 F 
   - u
     将后续字节翻译汇编指令,查看汇编指令
   - a
     编写汇编指令,从ip后面开始
   - e
   - t
   - p
     通过
** 编程
   1. 编写源代码
   2. 编译
   3. 连接
   4. 执行
   #+BEGIN_SRC
   assume cs:code
   
   code segment
       mov ax,1000H
       add ax,ax
       mov bx,2000H
       mov ax,4c00H
       int 21H
   code ends
   end
   #+END_SRC 
** 数据类型
   - 字型数据
     #+BEGIN_SRC
     dw  word 
     #+END_SRC
   - 字节
   
     #+BEGIN_SRC 
     byte
     #+END_SRC
   - dd
     #+BEGIN_SRC 
     dwork
     #+END_SRC
**  32位汇编
*** 32位通用寄存器
    - EAX 
      存放函数返回值
    - ECX
    - EDX
    - EBX
    - ESP 
      栈指针寄存器
    - EBP
      栈底指针
    - ESI
    - EDI
*** 内存
    - 写数据到内存
      #+BEGIN_SRC 
      mov byte[word|dword] ptr ds:[18FFF0],1
      #+END_SRC
*** 存储模式
    - 大端模式
      数据高位在低位,数据低位在高位
    - 小端模式
      数据低位在低位,数据高位在高位
*** 指令
**** mov
     1. mov r/m8,r8 r通用寄存器
     2. mov r/m16,r16 m代表内存
     3. mov r/m32,r32 imm代表立即数
     4. mov r8,r/m8 r8代表8位通用寄存器
     5. mov r32,r/m32 m8代表8位内存
     6. mov r8,imm8 imm8代表8位立即数
**** add
     加法
**** sub
     减法
**** and
     与
     通过该指令可以将操作对象的相应位置位置为0,其他为不变
     0位设置为0
     and al,1111110
**** or
     或
     通过该指令可以将操作对象的相应位置位置为1,其他为不变
**** not
**** movs
     移动数据,内存-内存
     - movs byte ptr es:[edi],byte ptr ds:[esi] -> movs
    - ESP
    - EBP
    - ESI
    - EDI
*** 内存
    - 写数据到内存
      #+BEGIN_SRC 
      mov byte[word|dword] ptr ds:[18FFF0],1
      #+END_SRC
*** 存储模式
    - 大端模式
      数据高位在低位,数据低位在高位
    - 小端模式
      数据低位在低位,数据高位在高位
*** 指令
**** mov
     1. mov r/m8,r8 r通用寄存器
     2. mov r/m16,r16 m代表内存
     3. mov r/m32,r32 imm代表立即数
     4. mov r8,r/m8 r8代表8位通用寄存器
     5. mov r32,r/m32 m8代表8位内存
     6. mov r8,imm8 imm8代表8位立即数
**** add
     加法
**** sub
     减法
**** and
     与
**** or
     或
**** not
**** movs
     移动数据,内存-内存
     - movs byte ptr es:[edi],byte ptr ds:[esi] -> movsb
     - movs word ptr es:[edi],word ptr ds:[esi] -> movsw
     - movs dword ptr es:[edi],dword ptr ds:[esi] -> movsd
**** EFL
     标志寄存器
     - df 
       df==0 si|di 会加
       df==1 si|di 会减
**** STOS
     AI/AX/EAX 的值存储到EDI指定的内存单元
**** REP
     重复执行 ecx的值会减一
**** PUSH
     1. 向堆栈中压入数据
     2. 修改栈顶指针ESP寄存器
**** POP
**** JMP
     修改eip内容
**** call
     要按F7
     f8 单步步过
     F2 下断点
     1. 修改了eip的值位call的地址
     2. 将call下一行的地址push到栈中
     3. esp中的值减4
	
**** ret
     1. add esp,4
     2. mov eip,esp
     3. 简写mov eip,[esp-4]

**** JCC
     - CF
       若算数操作产生的结果在最高有效位发生进位或者错位则将器置为1,反之位0
       这个标志通常用来指示无符号整型运算的益处状态
     - PF
       运算结果有效字节包含偶数个1位则置为1,否则置为0
     - AF
       如果算数操作在结果的第三位发生仅为或者错位则将该标志位置1,否额清0
     - ZF
       若结果为0则将其置为1,反之位0,经常与cmp或者test等指令一起使用
     - SF
       该标志被设置为有符号整型的最高有效位0正,反之位负
     - OF 
       益处标志,用于反应有符号位加减运算所得结果是否益处
        无符号运算益处看cf
	有符号益处看of
     - DF
       方向标志控制器指令,设置df标志使得串指令自动递减,(从高地址向底地址方向处理字符串),清楚该标志自动递增
       STD 设置为1
       cld 设置为0

**** 断点
     f2
     #+BEGIN_SRC 
     int 3
     #+END_SRC

**** adc
     同add 会加入进位

**** sbb
     
**** cmp
     修改了标志位
     ax=bx    zf=1 相等
     ax != bx zf=0 不相等
     ax < bx  cf=1 小于
     ax >= bx cf=0 大于等于
     ax > bx cf=0 并且zf=0
     ax <=bx cf=1 或者zf=1
     - je
       等于
     - jne
       不等于
     - jb
       小于
     - jnb
       大于等于
     - ja
       大于
     - jna
       小于等于
     

**** 
** 16位汇编
   
*** 指令
<<<<<<< HEAD
   - jmp
     jmp ax ==> mov ip,ax
   - jcxz
     有条件跳转 =短转移= 
     #+BEGIN_SRC 
     如果cx=0,转移到标号处执行
     相当与c
     if ((cx)==0) jmp short 标号;
     #+END_SRC
   - inc
     自加
   - dec
     自减
     
   - loop
     指令格式:loop 标号((cx)=(cx)-1 ,如果cx!=0,转移到标号处执行
     #+BEGIN_SRC 
     (cx)--;
     if ((cx)!=0) jmp short 标号;
     #+END_SRC
*** 寄存器
    1. cpu将从内存cs*16+ip 处理取指令执行
    2. cs,ip中的内容送入地址加法器(加法器完成:物理地址=段地址*16+偏移地址)
    3. 地址加法器将物理地址送入输入输出控制电路
    4. 输入输出控制电路将物理地址20000H送上地址总线
    5. 从内存cs:ip单元开始存放的机器指令通过数据总线传送入cpu
    6. 输入输出控制电路将机器指令送入指令缓存器中

    7. 读取一条指令后,ip中的值自动增加,增加读取指令的长度
    8. AX
       - AH
       - AL
    9. BX
       - BH
       - BL
    10. CX
	- CH
	- CL
    11. DX
	- DH
	- DL
    12. 总结
	1. 从cs:ip 指向的内存单元读取指令,读取的指令进入指令缓存器
=======
   
**** add
     加
**** sub
     减
**** div
     除
     1. 除数
	8bit 16bit 存在内存单元中,或者寄存器中
     2. 被除数
	AX或者AX或者dx中
	如果除数位8bit,被除数则为16bit,存放在ax中
	如果除数16bit,被除数则为32bit,ax存放在低16位,dx存放高16位
      3. 结果
	 如果除数位8bit,则al存商,ah存放余数
	 如果除数位16bit,则ax存放商,ds存放余数
**** dup
     db 3 dup (0);;定义了3个字节,他们的值都是0,相当于 db 0,0,0
     db 3 dup (0,1,2);;定义了9个字节,db 0,1,2,0,1,2,0,1,2
**** ret
     #+BEGIN_SRC  
     会比jmp多做一步
     poo ip所组合出来的地址内容全部是指令
     将ss:sp 字型数据 方式ip中 sp+2
     #+END_SRC
**** retf
     #+BEGIN_SRC 
     pop ip
     pop cs
     #+END_SRC
**** call
     #+BEGIN_SRC 
     push ip 当前ip
     call 标号 --> 1. 将指令放入指令缓存器中 2. ip+所读字节 3. 跳转到标号
     1. cs:ip 读取指令存放指令缓存器中
     2. ip=ip+所读指令的字节数
     3. 执行,放回第一步
     #+END_SRC
     1. call 标号 位移
     2. call far  ptr s 记录地址
	#+BEGIN_SRC 
	push cs
	push ip
	jmp s

	retf
	pop ip
	pop cs
	#+END_SRC
**** mul
     乘法
*** 寄存器 
    - AX
      - AH
      - AL
    - BX
      - BH
      - BL
    - CX
      - CH
      - CL
    - DX
      - DH
      - DL
    - ss
      ss:[bp]
>>>>>>> a3b2e776a3aa5fe93cd928c9e8a3910ef7a47053

	2. ip=ip+所读取指令的长度,从而指向下一条指令

	3. 指令执行,转到步骤1,重复执行

**** 指令
     cs:ip所组合出来的地址内容全部是指令

**** 段寄存器
     可以读写内存数据
     ds
     ds:si
     es:di
| 标志 | 值为1 | 值为0 |
|------+-------+-------|
| CF   | CY    | NC    |
| OF   | OV    | NV    |
| SF   | NG    | PL    |
| ZF   | ZR    | NZ    |
| PF   | PE    | PO    |


- 运算的信息状态
**** 标志位寄存器
     
*** 地址信息
    段地址+偏移地址
    #+BEGIN_SRC 
    DS SI
    ES DI
    SS BP
    CS IP
       SP
       BX
    #+END_SRC
    物理地址=基础地址+偏移地址
    物理地址=段地址*10+偏移地址
*** 内存
    字节byte --> 2个16进制数 --> 8个2进制数 bit比特
    1Byte=8bit
*** 栈
    ss:sp
<<<<<<< HEAD
*** Debug
    - R 
      查看cpu寄存器内容
    - D 
      查看内存中的内容
    - E
      修改内存中的内容
    - U
      将内存中的机器指令翻译成汇编指令
    - T
      执行一条机器指令
    - A
      以汇编指令的格式在内存中写入一条机器指令
*** 内存访问
**** DS和[address]
**** 栈
     任意时刻,ss:sp 指向栈顶元素
     栈空的状态,ss:sp指向栈空间最高地址单元的下一个单元
     1. push
	1. sp=sp-2 ss:sp 执行当前栈顶前面的单元,以当前栈顶前面的单元为新的栈顶
	2. 将ax中的内容送入ss:sp指向的内存单元中,ss:sp此时指向新栈顶
     2. pop
	1. 将ss:sp 指向的内存单元处的数据放入ax中
	2. sp=sp+2 ss:sp指向当前栈顶下面的单元
**** 已字符形式给出数据
     #+BEGIN_SRC 
     db 'abcdefg'
     #+END_SRC
     1. 大写转小写
	or al,20H
     2. 小写转大写
	and al,DF
=======
*** 显卡内存
    #+BEGIN_SRC 
    e B800:100
    偶数位存放 ascii
    基数为存放颜色
    80*80
    一共160行,85列
    44h
    0100 0100B
    7号位闪烁
    6号位R red 背景
    5号位g green 背景
    4号位 bule 背景
    3号位高亮
    2号位r 前景
    1号位g green前景
    0号位b blue 前景
    #+END_SRC
*** 内中断   
    0000:0000 - 0000:03ff
    
    cs:中断类型码*4+2
    ip:中断类型码*4
    1. 取得中断类型码
    2. 标志寄存器入栈,TF,IF设置为0
    3. cs,ip入栈
    

*** 内存访问
**** DS和[address]
**** 栈
     任意时刻,ss:sp 指向栈顶元素
     栈空的状态,ss:sp指向栈空间最高地址单元的下一个单元
     1. push
	1. sp=sp-2 ss:sp 执行当前栈顶前面的单元,以当前栈顶前面的单元为新的栈顶
	2. 将ax中的内容送入ss:sp指向的内存单元中,ss:sp此时指向新栈顶
     2. pop
	1. 将ss:sp 指向的内存单元处的数据放入ax中
	2. sp=sp+2 ss:sp指向当前栈顶下面的单元
**** 已字符形式给出数据
     #+BEGIN_SRC 
     db 'abcdefg'
     #+END_SRC
     1. 大写转小写
	or al,20H
     2. 小写转大写
	and al,DF
*** 端口
**** in
**** out

