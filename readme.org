** git
   1. 查看当前git状态
      	#+BEGIN_SRC 
      	git status
      	#+END_SRC
   2. commit配置
      #+BEGIN_SRC 
      git config --local user.name 'bhblinux'
      git config --local user.email 'you@example.com'
      #+END_SRC
   3. 查看提交记录
      #+BEGIN_SRC 
      git log 
      #+END_SRC
   4. 回滚
      #+BEGIN_SRC 
      git log 查看历史记录
      git reset --hard xxx
      回滚到回滚之前
      git reflog
      git reset --hard xxx
      #+END_SRC
   5. stash(暂存)
      #+BEGIN_SRC 
      git stash //创建暂存点
      git stash pop //回到暂存点之前(可能会遇到冲突,需要手动解决)
      stash相关常用命令：

      git stash             将当前工作区所有修改过的内容存储到“某个地方”，将工作区还原到当前版本未修改过的状态
      git stash list        查看“某个地方”存储的所有记录
      git stash clear     清空“某个地方”
      git stash pop       将第一个记录从“某个地方”重新拿到工作区（可能有冲突）
      git stash apply     编号, 将指定编号记录从“某个地方”重新拿到工作区（可能有冲突） 
      git stash drop      编号，删除指定编号的记录
      #+END_SRC
   6. branch(分支)
      #+BEGIN_SRC 
      1. 创建分支
      git branch dev
      2. 切换分支
      git checkout dev
      3. 回到主分支
      git checkout master
      4. 合并分支
      git merge dev
      5. 删除分支
      git branch -D|-d 分支名称
      6. 创建并切换
      git branch -m xx
      #+END_SRC
   7. 删除文件
      #+BEGIN_SRC 
      rm xx
      git rm xx
      #+END_SRC
	
git remote add hugo https://github.com/bhblinux/hugo.git
git push hugo master:work
1. git push
git push -u origin/remote_branch
git push hugo work:work
1. 远程分支问题
- 查看远程分支
	git branch -a 
- 查看本地分支
	git branch
- 创建分支
	git branch test
- 把分支推送远程分支
	git push origin test
- 切换分支
	git branch test
- 删除本地分支
	git brnch -d test
- 删除远程分支
	git push origin --delete test

** 多用户操作远程分支
*** 方法一
    1. git pull origin master
    2. git push origin master
   
*** 方法二 
    1. git fetch origin master
    2. git merge origin master
    3. git push origin master
    4. 

*** 方法三(推荐)
    1. git fetch origin master
    2. git rebase origin/master
    3. git push origin master

** 配置文件
   1. 系统配置文件:系统配置： /private/etc/gitconfig
   2. 用户配置： ~/.gitconfig
   3. 项目配置：.git/config
   4. 用户凭证
      1. 秘钥
	 #+BEGIN_SRC 
	 首先创建一对秘钥  ssh-keygen -t rsa，然后将 id_rsa.pub (公钥)内容拷贝到github中，日后操作无需再输入用户名和密码。
	 注意：这种方式需要使用GIt中 git@github.com:WuPeiqi/xxxxx.git 格式地址。
	 #+END_SRC
      2. 密码
	 #+BEGIN_SRC 
	 Https访问git时，避免每次操作需要输入用户名和密码，可以在配置文件中添加如下配置项：
    [credential]
    helper = store/cache/第三方
store:
        表示将用户名和密码保存在硬盘上
        第一次输入过用户名和密码之后，用户名和密码就会保存在当前用户根目录的 .git-credentials 文件中，内容格式为：https://用户名:密码@github.com

        自动添加配置命令：git config credential.helper store
cache: 
        表示将用户名和密码保存在缓存中
        第一次输入过用户名和密码之后，用户名和密码就会保存在缓存中，默认超时时间是 900 秒，缓存相关文件保存在当前用户根目录的 git-credential-cache 中 
        自动添加配置命令：
               git config credential.helper cache
               git config credential.helper 'cache --timeout=300'

相关操作：
        清除缓存：git credential-cache exit 
        指定超时：
            [credential]
            helper = cache --timeout=300
注意：
         这种方式需要使用GIt中 https://github.com/WuPeiqi/xxxx.git 格式地址。
         指定用户名和密码： https://用户名:密码@github.com/wupeiqi/xxx.git 
	 以斜杠“/”开头表示目录；

　　以星号“*”通配多个字符；

　　以问号“?”通配单个字符

　　以方括号“[]”包含单个字符的匹配列表；

　　以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；
 #+END_SRC
      3. 版本
	 #+BEGIN_SRC 
	 git tag -a v1.0 -m '版本介绍'        本地创建Tag
    git show v1.0                       查看
    git tags -n                         查看本地Tag
    git tag -l 'v1.4.2.*'               查看本地Tag，模糊匹配
    git tag -d v1.0                     删除Tag
    git push origin :refs/tags/v0.2     更新远程tag
    git checkout v.10                   切换tag
    git fetch origin tag V1.2

    git push origin  --tags
    git pull origin  --tags
    
    git clone -b v0.1
	 #+END_SRC

https://www.cnblogs.com/wupeiqi/p/7295372.html
